name: Main Taski workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    # Блок services аналогичен docker-compose.yml
    services:
      postgres:
        image: postgres:13.10
        # Указываем имя тестовой базы, имя и пароль пользователя в открытом виде,
        # ведь эта база будет работать только во время прогона тестов
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        # Эта конструкция описывает проверку готовности сервиса postgres
        # Если её не будет, то тесты могут запуститься раньше, чем сервер PostgreSQL
        # В результате тесты опять решат, что базы нет, — и упадут
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ./backend/requirements.txt
    # Этот шаг дополним переменными для доступа к БД
    - name: Test with flake8 and django tests
      # Добавляем env-переменные для доступа к БД
      env:
        POSTGRES_USER: django_user
        POSTGRES_PASSWORD: django_password
        POSTGRES_DB: django_db
        # Сервер БД запущен в Docker, но его порт проброшен на хост
        # Поэтому подключаемся к 127.0.0.1:5432
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      run: |
        cd backend/
        python manage.py test

  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        # Получение исходного кода из репозитория
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        # Установка сборщика контейнеров Docker
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        # Авторизация на Docker Hub
        uses: docker/login-action@v2
        # При помощи with передаём в action параметры username и password
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          # Хорошо ли держать логин и пароль прямо в коде workflow?
          # Нет, это нехорошо
      - name: Push to DockerHub
        # Одновременный билд и пуш образа в Docker Hub
        uses: docker/build-push-action@v4
        with:
          # Параметр context: ./backend/ указывает, что нужный Dockerfile 
          # находится в ./backend/
          context: ./backend/
          # Параметр push: true указывает, что образ нужно не только собрать,
          # но и отправить на Docker Hub
          push: true
          # В параметре tags задаётся название и тег для образа.
          # Для каждого пересобранного образа 
          # устанавливаем тег latest, чтобы потом
          # на сервере и в docker-compose.yml не указывать версию
          tags: kreigun/taski_backend:latest

  frontend_tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up nodeJS
      # Это готовый воркфлоу для установки Node.js на раннер
      uses: actions/setup-node@v3
      with:
        # Это параметр воркфлоу, указывающий нужную версию Node.js
        node-version: 18

    - name: Install dependencies
      # Эта команда устанавливает зависимости для фронтенда
      run: |
        cd frontend/
        npm ci

    - name: Test frontend
      # Запускаем тесты
      run: |
        cd frontend/
        npm run test
  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: kreigun/taski_frontend:latest

  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./gateway/
          push: true
          # Тут вместо username должен быть ваш логин на Docker Hub
          tags: kreigun/taski_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: 
      # Дождёмся билда всех образов Taski
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    # Копируем docker-compose.production.yml на продакшен-сервер
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
    # Передаём параметры для action appleboy/scp-action:
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: 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
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.production.yml"
        target: "taski"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: b3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABCBqmoBYy
        YHfqqz9kAljZYNAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQCtfvJCJsky
        Tl/M0zdnmh9d2LEU6/AmaXC+M1MemIvYjrV/x27qHQGSbEOb8sEXl8Ro0WTe5Tt042ZpnM
        fj6k8to1P/Kupcgty1SShxxppt7v5cRXVmvsp+M6RujoECU5vr1nbF5bTd9GyYCMxRe/b/
        YOF1g5Sg0lvBADgCGGgKQ9YFLHzaKJseYzqRBqENCw+s5aiCDP2BoF/rDfpBxzPAmnSZHL
        B6ZiWWdHtri+9GoS9fZbYIfX0/wsjofTpvlphAH86m/ZxtvqEr97bkcBtNUQhwItedR5Om
        bRBmSAScha1hBtb7IyQY3qfyHg8o0x4l5DsJGD/Huiajx0fVJKfgGsswLty4o9r6b831j4
        s6SJ2ucovn2B8A9h876IFvfEwAwn2Ixq9Dzw5uq2cU9YTwOV5aGcfr8GoNlLYQVic/ECIf
        6C1xKKyB0hCJyX6wXCPiVQObdaOGluK2KTCRidYQtsdf0uYstJ9AmINcto+pXIob8vjO0j
        Nd/OEl7fPHOqcAAAWgBsSlAHhPFhgffdAu63T6Bh/i7CxiQhukD2pEGBGG9ldNRvB9689N
        nHjs/YuM80JbAev8bffyIVWSfG9Tc7TpP+7E6OAOctqdm48TkorJLqMi6EBWhFa4MW7nGF
        xQrPy7sYjHeV5CQXoovuxXNCz4fyVxLVgdyyiLCl90Wx3PosAGaS0dzYzhrAW+yGn8qqUh
        he+NIrUx9zF8ggIuMLKd4pLVol/B5jpzjpBRMZm9ou6elj7OX7GyXSnupZZWV18IgEmKXV
        cvA5ZuWBEIeoiowhi5m+ftjrNGK/5lUpW/U04MmiF/F9iPAtAaYwfzPIXQh4vFp24XXoxM
        W7lA9GLWoLldt2Evy+D+ozKbKIKdN/JVqReIJQL4ZkAG3oUe1U2V5KY8EeKrSVsns8MSmc
        Zz1UBA+Fu9jdRytJJn4SzKg/NTos/wkRb53MvYwgIeGQYMCpK+8oQdP2zMVMKTGbRUlRA6
        kXpRv3hsrd7qF6xf7rcU9V3kkZcVm9QO6kmkqQqyFTl9O+lcXwTqjYXf6YL50meYb0J8OM
        fBTR2WaKnm1lpjKUDLSm4Jgj8SNG8v+IDHpHDCkSoqUJG3aZCJ3Jawbk2XI4hgNtWDOApS
        O9d+aVP5fZSJMH0ZPwdElXtvnvb1AIxnBbw8YztWcJlkTg0goWMUwE9UTOXjpM8B6fyNe4
        lrKGqFIvfx0wnKof8h5Fjw7BXn3ERkCpJcOFkoji4aEtd4D9eWYGwUtB9XuRQ/cSeUEy+V
        Jt+fdnjfnKYVUazgtbkg0aGn9jHFqEceEIuzTMFA//3pSPZurS0h4WfziOkzlTdMpC2hx8
        BPjUS6ToqlEj1D/+T99HZhwDgC7q7c4bsoiMOPQgtcvFzWMLmA7urqJjHa+BMdLbXR0EKo
        f4SErwJ4Ddccr8IgA9Vv3sANkKE2UV4nRMUhZKIb/5DZ/CU8WpTooGA06qOKKq0UJXBV+4
        2dY6iCGIUrFCHEgeCbb35t0HnUCMvprKg1Vx/Wucn36kLC41luRcHmkZ/rf7BOnvINxY0V
        8JdbgZ8NjMHlSyphs0/su3zEd6aqIX4alvFh9y+v2hRDd1mi+BMEo5niOk+Y9heFHMbnqJ
        YMMotfjp7Mk53Z5I9saDGI4iisgguQrMnNoUpaJsErFx2gjNT2cVfQYzIZCnQ6cfz2gnXz
        DHMFq6exmuE3xXTLBI42BpZwFCegrPc7LaqWa2lE0nXgFHVMO2jKcj4Jc+7WHWsZLp2Hh9
        WQUHqaijtNqTRCRyEyGlqiXe/J78sOV0GmtHHtzR3fEbE22jK8K4zHXfaxqh5ZV1gTJy46
        WL4Ookb8n+nVetuvQgaUHTX0i/yWvV3gerNn5CxW+CFgoRk93rJtdCVBC2wsY/5OCESnDq
        1REfoHxy1XEJqGWbwXNYzv/WgntEmodrI08GOdWggSVBSY7s9tO4ivXXvLw5XFGLsj3wVJ
        j0gTaJm4G8TwsK2DF3JcIvDH0+an4+4oQ8QVsWO71BXbUgK8la+pUP0ULQ1R6AfGDK8Lt0
        wpOc/DKzdhE+DO63jMJIZDzYJKJEeiMGkmFb0pZtdpe52sXfKezAY8k5L97BMaxbHn2ed3
        B2MPe1kk/7jL/Z5WZoaSPXdWQZk7d1yEM5+1i/G5TilKhvqA90aX9DVmkYS/LtNySc7ttq
        OMjxuGTjM/SSJqTHLyjqMMSRNZPYRjMn4P5MwumfDZL70iZ+/ek/WUH+cJUXsRjnyFxCTx
        uEKAgkJ+DJ3TfVjufIhWf3QEtXAahQEMLLP37xCYTtRPaEHlRjuHr64DLf+oNmrgjrS0Ph
        s3NA3gIDEOtCi1Q6WMDcvudpGQoaa0ztIB2fUu7U3X7Nx2OpSLR1k1zWl6BxUm3ZAynwNM
        XFcnjPtGzU9vhFwkFuCjWvQlqvTemVJcTr776ixfPyb3Fqix
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        # Параметр script передаёт в action appleboy/ssh-action команды,
        # которые нужно выполнить на сервере, 
        # с которым установлено соединение
        script: |
          cd taski
          # Выполняет pull образов с Docker Hub
          sudo docker compose -f docker-compose.production.yml pull
          # Перезапускает все контейнеры в Docker Compose
          sudo docker compose -f docker-compose.production.yml down
          sudo docker compose -f docker-compose.production.yml up -d
          # Выполняет миграции и сбор статики
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
          sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Деплой успешно выполнен!
